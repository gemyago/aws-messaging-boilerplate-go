// Code generated by mockery v2.50.0. DO NOT EDIT.

//go:build !release

package awsapi

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockMessageSender is an autogenerated mock type for the MessageSender type
type MockMessageSender[TMessage interface{}] struct {
	mock.Mock
}

type MockMessageSender_Expecter[TMessage interface{}] struct {
	mock *mock.Mock
}

func (_m *MockMessageSender[TMessage]) EXPECT() *MockMessageSender_Expecter[TMessage] {
	return &MockMessageSender_Expecter[TMessage]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, message
func (_m *MockMessageSender[TMessage]) Execute(ctx context.Context, message *TMessage) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *TMessage) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageSender_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockMessageSender_Execute_Call[TMessage interface{}] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - message *TMessage
func (_e *MockMessageSender_Expecter[TMessage]) Execute(ctx interface{}, message interface{}) *MockMessageSender_Execute_Call[TMessage] {
	return &MockMessageSender_Execute_Call[TMessage]{Call: _e.mock.On("Execute", ctx, message)}
}

func (_c *MockMessageSender_Execute_Call[TMessage]) Run(run func(ctx context.Context, message *TMessage)) *MockMessageSender_Execute_Call[TMessage] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*TMessage))
	})
	return _c
}

func (_c *MockMessageSender_Execute_Call[TMessage]) Return(_a0 error) *MockMessageSender_Execute_Call[TMessage] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageSender_Execute_Call[TMessage]) RunAndReturn(run func(context.Context, *TMessage) error) *MockMessageSender_Execute_Call[TMessage] {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageSender creates a new instance of MockMessageSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageSender[TMessage interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageSender[TMessage] {
	mock := &MockMessageSender[TMessage]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
