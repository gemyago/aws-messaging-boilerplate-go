// Code generated by mockery. DO NOT EDIT.

//go:build !release

package v1controllers

import (
	context "context"

	handlers "github.com/gemyago/aws-sqs-boilerplate-go/internal/api/http/v1routes/handlers"
	mock "github.com/stretchr/testify/mock"
)

// MockmessagesCommands is an autogenerated mock type for the messagesCommands type
type MockmessagesCommands struct {
	mock.Mock
}

type MockmessagesCommands_Expecter struct {
	mock *mock.Mock
}

func (_m *MockmessagesCommands) EXPECT() *MockmessagesCommands_Expecter {
	return &MockmessagesCommands_Expecter{mock: &_m.Mock}
}

// PublishMessage provides a mock function with given fields: _a0, _a1
func (_m *MockmessagesCommands) PublishMessage(_a0 context.Context, _a1 *handlers.MessagesPublishMessageRequest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PublishMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *handlers.MessagesPublishMessageRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockmessagesCommands_PublishMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishMessage'
type MockmessagesCommands_PublishMessage_Call struct {
	*mock.Call
}

// PublishMessage is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *handlers.MessagesPublishMessageRequest
func (_e *MockmessagesCommands_Expecter) PublishMessage(_a0 interface{}, _a1 interface{}) *MockmessagesCommands_PublishMessage_Call {
	return &MockmessagesCommands_PublishMessage_Call{Call: _e.mock.On("PublishMessage", _a0, _a1)}
}

func (_c *MockmessagesCommands_PublishMessage_Call) Run(run func(_a0 context.Context, _a1 *handlers.MessagesPublishMessageRequest)) *MockmessagesCommands_PublishMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*handlers.MessagesPublishMessageRequest))
	})
	return _c
}

func (_c *MockmessagesCommands_PublishMessage_Call) Return(_a0 error) *MockmessagesCommands_PublishMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockmessagesCommands_PublishMessage_Call) RunAndReturn(run func(context.Context, *handlers.MessagesPublishMessageRequest) error) *MockmessagesCommands_PublishMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockmessagesCommands creates a new instance of MockmessagesCommands. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockmessagesCommands(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockmessagesCommands {
	mock := &MockmessagesCommands{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
