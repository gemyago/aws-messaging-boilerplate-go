// Code generated by apigen DO NOT EDIT.

package handlers

import (
	"encoding/json"
	"fmt"
	"time"

	. "github.com/gemyago/aws-sqs-boilerplate-go/internal/api/http/v1routes/models"
)

// Below is to workaround unused imports.
var _ = time.Time{}
var _ = json.Unmarshal
var _ = fmt.Sprint

// PetsCreatePetRequest represents params for createPet operation
//
// Request: POST /pets.
type PetsCreatePetRequest struct {
	// Payload is parsed from request body and declared as payload.
	Payload *Pet
}

// PetsGetPetByIdRequest represents params for getPetById operation
//
// Request: GET /pets/{petId}.
type PetsGetPetByIdRequest struct {
	// PetId is parsed from request path and declared as petId.
	PetId int64
}

// PetsListPetsRequest represents params for listPets operation
//
// Request: GET /pets.
type PetsListPetsRequest struct {
	// Limit is parsed from request query and declared as limit.
	Limit int64
	// Offset is parsed from request query and declared as offset.
	Offset int64
}

type PetsController struct {
	// POST /pets
	//
	// Request type: PetsCreatePetRequest,
	//
	// Response type: none
	CreatePet httpHandlerFactory

	// GET /pets/{petId}
	//
	// Request type: PetsGetPetByIdRequest,
	//
	// Response type: PetResponse
	GetPetById httpHandlerFactory

	// GET /pets
	//
	// Request type: PetsListPetsRequest,
	//
	// Response type: PetsResponse
	ListPets httpHandlerFactory
}

type PetsControllerBuilder struct {
	// POST /pets
	//
	// Request type: PetsCreatePetRequest,
	//
	// Response type: none
	HandleCreatePet actionBuilderVoidResult[*PetsControllerBuilder, *PetsCreatePetRequest]

	// GET /pets/{petId}
	//
	// Request type: PetsGetPetByIdRequest,
	//
	// Response type: PetResponse
	HandleGetPetById actionBuilder[*PetsControllerBuilder, *PetsGetPetByIdRequest, *PetResponse]

	// GET /pets
	//
	// Request type: PetsListPetsRequest,
	//
	// Response type: PetsResponse
	HandleListPets actionBuilder[*PetsControllerBuilder, *PetsListPetsRequest, *PetsResponse]
}

func (c *PetsControllerBuilder) Finalize() *PetsController {
	return &PetsController{
		CreatePet: mustInitializeAction("createPet", c.HandleCreatePet.httpHandlerFactory),
		GetPetById: mustInitializeAction("getPetById", c.HandleGetPetById.httpHandlerFactory),
		ListPets: mustInitializeAction("listPets", c.HandleListPets.httpHandlerFactory),
	}
}

func BuildPetsController() *PetsControllerBuilder {
	controllerBuilder := &PetsControllerBuilder{}

	// POST /pets
	controllerBuilder.HandleCreatePet.controllerBuilder = controllerBuilder
	controllerBuilder.HandleCreatePet.defaultStatusCode = 201
	controllerBuilder.HandleCreatePet.voidResult = true
	controllerBuilder.HandleCreatePet.paramsParserFactory = newParamsParserPetsCreatePet

	// GET /pets/{petId}
	controllerBuilder.HandleGetPetById.controllerBuilder = controllerBuilder
	controllerBuilder.HandleGetPetById.defaultStatusCode = 200
	controllerBuilder.HandleGetPetById.paramsParserFactory = newParamsParserPetsGetPetById

	// GET /pets
	controllerBuilder.HandleListPets.controllerBuilder = controllerBuilder
	controllerBuilder.HandleListPets.defaultStatusCode = 200
	controllerBuilder.HandleListPets.paramsParserFactory = newParamsParserPetsListPets

	return controllerBuilder
}

func RegisterPetsRoutes(controller *PetsController, app *HTTPApp) {
	app.router.HandleRoute("POST", "/pets", controller.CreatePet(app))
	app.router.HandleRoute("GET", "/pets/{petId}", controller.GetPetById(app))
	app.router.HandleRoute("GET", "/pets", controller.ListPets(app))
}
