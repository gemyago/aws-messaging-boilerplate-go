// Code generated by apigen DO NOT EDIT.

package handlers

import (
	"encoding/json"
	"fmt"
	"time"

	. "github.com/gemyago/aws-sqs-boilerplate-go/internal/api/http/v1routes/models"
)

// Below is to workaround unused imports.
var _ = time.Time{}
var _ = json.Unmarshal
var _ = fmt.Sprint

type MessagesPublishDummyMessageTarget string

// List of MessagesPublishDummyMessageTarget values.
const (
	MessagesPublishDummyMessageTargetSNS MessagesPublishDummyMessageTarget = "SNS"
	MessagesPublishDummyMessageTargetEVENTBRIDGE MessagesPublishDummyMessageTarget = "EVENT_BRIDGE"
)

func(v MessagesPublishDummyMessageTarget) IsSNS() bool {
  return v == MessagesPublishDummyMessageTargetSNS
}

func(v MessagesPublishDummyMessageTarget) IsEVENTBRIDGE() bool {
  return v == MessagesPublishDummyMessageTargetEVENTBRIDGE
}

func(v MessagesPublishDummyMessageTarget) String() string {
	return string(v)
}

type assignableMessagesPublishDummyMessageTarget interface {
	IsSNS() bool
	IsEVENTBRIDGE() bool
	String() string
}

func AsMessagesPublishDummyMessageTarget(v assignableMessagesPublishDummyMessageTarget) (MessagesPublishDummyMessageTarget) {
	return MessagesPublishDummyMessageTarget(v.String())
}

func ParseMessagesPublishDummyMessageTarget(str string, target *MessagesPublishDummyMessageTarget) error {
	switch str {
	case "SNS":
		*target = MessagesPublishDummyMessageTargetSNS
	case "EVENT_BRIDGE":
		*target = MessagesPublishDummyMessageTargetEVENTBRIDGE
	default:
		return fmt.Errorf("unexpected MessagesPublishDummyMessageTarget value: %s", str)
	}
	return nil
}

func (v *MessagesPublishDummyMessageTarget) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return err
	}
	return ParseMessagesPublishDummyMessageTarget(str, v)
}

// All allowed values of MessagesPublishDummyMessageTarget enum.
var AllowableMessagesPublishDummyMessageTargetValues = []MessagesPublishDummyMessageTarget{
	MessagesPublishDummyMessageTargetSNS,
	MessagesPublishDummyMessageTargetEVENTBRIDGE,
}



// MessagesProcessDummyMessageRequest represents params for processDummyMessage operation
//
// Request: POST /dummy-messages/process.
type MessagesProcessDummyMessageRequest struct {
	// Payload is parsed from request body and declared as payload.
	Payload *DummyMessage
}

// MessagesPublishDummyMessageRequest represents params for publishDummyMessage operation
//
// Request: POST /dummy-messages/publish.
type MessagesPublishDummyMessageRequest struct {
	// Target is parsed from request query and declared as target.
	Target MessagesPublishDummyMessageTarget
	// Payload is parsed from request body and declared as payload.
	Payload *DummyMessage
}

type MessagesController struct {
	// GET /health
	//
	// Request type: none
	//
	// Response type: none
	HealthCheck httpHandlerFactory

	// POST /dummy-messages/process
	//
	// Request type: MessagesProcessDummyMessageRequest,
	//
	// Response type: none
	ProcessDummyMessage httpHandlerFactory

	// POST /dummy-messages/publish
	//
	// Request type: MessagesPublishDummyMessageRequest,
	//
	// Response type: none
	PublishDummyMessage httpHandlerFactory
}

type MessagesControllerBuilder struct {
	// GET /health
	//
	// Request type: none
	//
	// Response type: none
	HandleHealthCheck actionBuilderNoParamsVoidResult[*MessagesControllerBuilder]

	// POST /dummy-messages/process
	//
	// Request type: MessagesProcessDummyMessageRequest,
	//
	// Response type: none
	HandleProcessDummyMessage actionBuilderVoidResult[*MessagesControllerBuilder, *MessagesProcessDummyMessageRequest]

	// POST /dummy-messages/publish
	//
	// Request type: MessagesPublishDummyMessageRequest,
	//
	// Response type: none
	HandlePublishDummyMessage actionBuilderVoidResult[*MessagesControllerBuilder, *MessagesPublishDummyMessageRequest]
}

func (c *MessagesControllerBuilder) Finalize() *MessagesController {
	return &MessagesController{
		HealthCheck: mustInitializeAction("healthCheck", c.HandleHealthCheck.httpHandlerFactory),
		ProcessDummyMessage: mustInitializeAction("processDummyMessage", c.HandleProcessDummyMessage.httpHandlerFactory),
		PublishDummyMessage: mustInitializeAction("publishDummyMessage", c.HandlePublishDummyMessage.httpHandlerFactory),
	}
}

func BuildMessagesController() *MessagesControllerBuilder {
	controllerBuilder := &MessagesControllerBuilder{}

	// GET /health
	controllerBuilder.HandleHealthCheck.controllerBuilder = controllerBuilder
	controllerBuilder.HandleHealthCheck.defaultStatusCode = 204
	controllerBuilder.HandleHealthCheck.voidResult = true
	controllerBuilder.HandleHealthCheck.paramsParserFactory = makeVoidParamsParser

	// POST /dummy-messages/process
	controllerBuilder.HandleProcessDummyMessage.controllerBuilder = controllerBuilder
	controllerBuilder.HandleProcessDummyMessage.defaultStatusCode = 202
	controllerBuilder.HandleProcessDummyMessage.voidResult = true
	controllerBuilder.HandleProcessDummyMessage.paramsParserFactory = newParamsParserMessagesProcessDummyMessage

	// POST /dummy-messages/publish
	controllerBuilder.HandlePublishDummyMessage.controllerBuilder = controllerBuilder
	controllerBuilder.HandlePublishDummyMessage.defaultStatusCode = 202
	controllerBuilder.HandlePublishDummyMessage.voidResult = true
	controllerBuilder.HandlePublishDummyMessage.paramsParserFactory = newParamsParserMessagesPublishDummyMessage

	return controllerBuilder
}

func RegisterMessagesRoutes(controller *MessagesController, app *HTTPApp) {
	app.router.HandleRoute("GET", "/health", controller.HealthCheck(app))
	app.router.HandleRoute("POST", "/dummy-messages/process", controller.ProcessDummyMessage(app))
	app.router.HandleRoute("POST", "/dummy-messages/publish", controller.PublishDummyMessage(app))
}
