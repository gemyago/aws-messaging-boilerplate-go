// Code generated by apigen DO NOT EDIT.

package handlers

import (
	"encoding/json"
	"fmt"
	"time"

	. "github.com/gemyago/aws-sqs-boilerplate-go/internal/api/http/v1routes/models"
)

// Below is to workaround unused imports.
var _ = time.Time{}
var _ = json.Unmarshal
var _ = fmt.Sprint

type MessagesPublishMessageTarget string

// List of MessagesPublishMessageTarget values.
const (
	MessagesPublishMessageTargetSNS MessagesPublishMessageTarget = "SNS"
	MessagesPublishMessageTargetEVENTBRIDGE MessagesPublishMessageTarget = "EVENT_BRIDGE"
)

func(v MessagesPublishMessageTarget) IsSNS() bool {
  return v == MessagesPublishMessageTargetSNS
}

func(v MessagesPublishMessageTarget) IsEVENTBRIDGE() bool {
  return v == MessagesPublishMessageTargetEVENTBRIDGE
}

func(v MessagesPublishMessageTarget) String() string {
	return string(v)
}

type assignableMessagesPublishMessageTarget interface {
	IsSNS() bool
	IsEVENTBRIDGE() bool
	String() string
}

func AsMessagesPublishMessageTarget(v assignableMessagesPublishMessageTarget) (MessagesPublishMessageTarget) {
	return MessagesPublishMessageTarget(v.String())
}

func ParseMessagesPublishMessageTarget(str string, target *MessagesPublishMessageTarget) error {
	switch str {
	case "SNS":
		*target = MessagesPublishMessageTargetSNS
	case "EVENT_BRIDGE":
		*target = MessagesPublishMessageTargetEVENTBRIDGE
	default:
		return fmt.Errorf("unexpected MessagesPublishMessageTarget value: %s", str)
	}
	return nil
}

func (v *MessagesPublishMessageTarget) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return err
	}
	return ParseMessagesPublishMessageTarget(str, v)
}

// All allowed values of MessagesPublishMessageTarget enum.
var AllowableMessagesPublishMessageTargetValues = []MessagesPublishMessageTarget{
	MessagesPublishMessageTargetSNS,
	MessagesPublishMessageTargetEVENTBRIDGE,
}



// MessagesProcessMessageRequest represents params for processMessage operation
//
// Request: POST /messages/process.
type MessagesProcessMessageRequest struct {
	// Payload is parsed from request body and declared as payload.
	Payload *Message
}

// MessagesPublishMessageRequest represents params for publishMessage operation
//
// Request: POST /messages/publish.
type MessagesPublishMessageRequest struct {
	// Target is parsed from request query and declared as target.
	Target MessagesPublishMessageTarget
	// Payload is parsed from request body and declared as payload.
	Payload *Message
}

type MessagesController struct {
	// GET /health
	//
	// Request type: none
	//
	// Response type: none
	HealthCheck httpHandlerFactory

	// POST /messages/process
	//
	// Request type: MessagesProcessMessageRequest,
	//
	// Response type: none
	ProcessMessage httpHandlerFactory

	// POST /messages/publish
	//
	// Request type: MessagesPublishMessageRequest,
	//
	// Response type: none
	PublishMessage httpHandlerFactory
}

type MessagesControllerBuilder struct {
	// GET /health
	//
	// Request type: none
	//
	// Response type: none
	HandleHealthCheck actionBuilderNoParamsVoidResult[*MessagesControllerBuilder]

	// POST /messages/process
	//
	// Request type: MessagesProcessMessageRequest,
	//
	// Response type: none
	HandleProcessMessage actionBuilderVoidResult[*MessagesControllerBuilder, *MessagesProcessMessageRequest]

	// POST /messages/publish
	//
	// Request type: MessagesPublishMessageRequest,
	//
	// Response type: none
	HandlePublishMessage actionBuilderVoidResult[*MessagesControllerBuilder, *MessagesPublishMessageRequest]
}

func (c *MessagesControllerBuilder) Finalize() *MessagesController {
	return &MessagesController{
		HealthCheck: mustInitializeAction("healthCheck", c.HandleHealthCheck.httpHandlerFactory),
		ProcessMessage: mustInitializeAction("processMessage", c.HandleProcessMessage.httpHandlerFactory),
		PublishMessage: mustInitializeAction("publishMessage", c.HandlePublishMessage.httpHandlerFactory),
	}
}

func BuildMessagesController() *MessagesControllerBuilder {
	controllerBuilder := &MessagesControllerBuilder{}

	// GET /health
	controllerBuilder.HandleHealthCheck.controllerBuilder = controllerBuilder
	controllerBuilder.HandleHealthCheck.defaultStatusCode = 204
	controllerBuilder.HandleHealthCheck.voidResult = true
	controllerBuilder.HandleHealthCheck.paramsParserFactory = makeVoidParamsParser

	// POST /messages/process
	controllerBuilder.HandleProcessMessage.controllerBuilder = controllerBuilder
	controllerBuilder.HandleProcessMessage.defaultStatusCode = 202
	controllerBuilder.HandleProcessMessage.voidResult = true
	controllerBuilder.HandleProcessMessage.paramsParserFactory = newParamsParserMessagesProcessMessage

	// POST /messages/publish
	controllerBuilder.HandlePublishMessage.controllerBuilder = controllerBuilder
	controllerBuilder.HandlePublishMessage.defaultStatusCode = 202
	controllerBuilder.HandlePublishMessage.voidResult = true
	controllerBuilder.HandlePublishMessage.paramsParserFactory = newParamsParserMessagesPublishMessage

	return controllerBuilder
}

func RegisterMessagesRoutes(controller *MessagesController, app *HTTPApp) {
	app.router.HandleRoute("GET", "/health", controller.HealthCheck(app))
	app.router.HandleRoute("POST", "/messages/process", controller.ProcessMessage(app))
	app.router.HandleRoute("POST", "/messages/publish", controller.PublishMessage(app))
}
